{"version":3,"sources":["../../src/DualListBox.js","../../src/index.js","App.js","index.js"],"names":["styles","margin","fixedcard","buttonWidth","nopadding","DualListBox","e","selected","selectedLeft","selectedRight","alreadyMoved","currentSelected","pathToNode","console","n","currentNodeL","tempNode","leftArray","list","selectedList","JSON","props","CloneObject","removeNode","removeFrom","node","parent","this","findParent","newChildNodes","array","id","findNode","index","element","findPath","path","pushParent","addNode","arrayTo","existNode","moveToNotSelected","state","currentNodeR","onnodemoved","render","className","md","style","key","data","title","open","onClick","handleLeftNodeClick","moveToSelected","moveAllToRight","movedAllToLeft","handleRightNodeClick","React","Component","DualTreeViewListBox","tree","App","useState","selectedTree","setTree","stringify","undefined","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.8fd591e5.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Row, Col, Button, Card } from 'reactstrap';\r\nimport  DynamicTree from 'react-dynamic-animated-tree';\r\n\r\nvar found = false // once you move a node make sure to set this to false again\r\n\r\nconst styles={\r\n    margin: {\r\n        \"margin\": \"5px\"\r\n    },\r\n    fixedcard: {\r\n        \"minHeight\": \"400px\",\r\n        \"maxHeight\": \"400px\",\r\n        \"padding\": \"10px\",\r\n        \"overflowY\": \"auto\",\r\n        \"background\": \"Grey\",\r\n        \"color\": \"White\"\r\n    },\r\n    buttonWidth: {\r\n        \"width\": \"50px\",\r\n        \"margin\": \"5px\"\r\n    },\r\n    nopadding: {\r\n        \"padding-left\": \"0px\",\r\n    }\r\n}\r\nclass DualListBox extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            list: props.tree ? this.CloneObject(props.tree) : [], \r\n            selected: null,\r\n            selectedLeft: null,\r\n            selectedRight: null,\r\n            selectedList: []\r\n         }\r\n        this.handleLeftNodeClick = this.handleLeftNodeClick.bind(this)\r\n        this.handleRightNodeClick = this.handleRightNodeClick.bind(this)\r\n\r\n        this.moveToSelected = this.moveToSelected.bind(this)\r\n        this.moveToNotSelected = this.moveToNotSelected.bind(this)\r\n\r\n        this.moveAllToRight = this.moveAllToRight.bind(this);\r\n        this.movedAllToLeft = this.movedAllToLeft.bind(this);\r\n    }\r\n//#region node click events\r\n    handleLeftNodeClick = e => {\r\n        if(e.id !== \"root\")\r\n        {\r\n            this.setState({ \r\n                selected: e, \r\n                selectedLeft: e,\r\n                selectedRight: null\r\n            })\r\n        }\r\n    }\r\n\r\n    handleRightNodeClick = e => {\r\n        if(e.id !== \"root\")\r\n        {\r\n            this.setState({ \r\n                selected: e,\r\n                selectedRight: e,\r\n                selectedLeft: null\r\n            })\r\n        }\r\n    }\r\n//#endregion\r\n\r\n//#region node operations\r\n    CloneObject(object){\r\n        if(object){\r\n            var cloned = JSON.parse(JSON.stringify(object))\r\n            return cloned\r\n        }\r\n        return null        \r\n    }\r\n\r\n    removeNode(array, node){\r\n        let removeFrom = array\r\n        if(node.parentNode){\r\n            parent = this.findParent(removeFrom, node)\r\n            if(parent){\r\n                let newChildNodes = parent.childNodes.filter( n => {\r\n                    return n.id !== node.id\r\n                })\r\n                console.log(newChildNodes)\r\n                if(newChildNodes.length === 0){\r\n                    //remove parent too\r\n                    removeFrom = this.removeNode(removeFrom, parent)\r\n                }\r\n                else{\r\n                    parent.childNodes.length = 0\r\n                    parent.childNodes.push(...newChildNodes)\r\n                }            \r\n            }\r\n        }\r\n        else{\r\n            //perhaps parent is root\r\n            removeFrom = array.filter( n => {\r\n                return n.id !== node.id\r\n            })\r\n        }\r\n        return removeFrom\r\n    }\r\n\r\n    findParent(array, node){\r\n        var id = node.parentNode\r\n        var foundNode = this.findNode(array, id)\r\n        return foundNode;\r\n    }\r\n\r\n    findNode(array, id){\r\n        let node;\r\n        for (let index = 0; index < array.length; index++) {\r\n            const element = array[index];\r\n            if(element.id === id){\r\n                node = element\r\n                break\r\n            }\r\n            else{\r\n                node = this.findNode(element.childNodes, id)\r\n                if(node){\r\n                    break\r\n                }\r\n            }\r\n        }\r\n        return node;\r\n    }\r\n\r\n    findPath(array, node){\r\n        var path = []\r\n        path.push(node.id)\r\n        this.pushParent(array, node, path)\r\n        path.reverse()\r\n        return path\r\n    }\r\n\r\n    pushParent(array, node, path){\r\n        \r\n        var parent = this.findParent(array, node)\r\n        if(parent){\r\n            path.push(parent.id)\r\n            this.pushParent(array, parent, path)\r\n        }\r\n    }\r\n\r\n    addNode(arrayTo, node){\r\n        // if node in destination array, just skip it\r\n        // Find the parent from the destination array and add it\r\n        // if parent not found, add to root\r\n        let nodeFound = this.findNode(arrayTo, node.id)\r\n        if(nodeFound){\r\n            \r\n        }\r\n        else{\r\n            let parent = this.findParent(arrayTo, node)\r\n            if(parent){\r\n                let existNode = parent.childNodes.find(function(element){\r\n                    return element.id === node.id\r\n                })\r\n                console.log(existNode)\r\n                if(!existNode){\r\n                    console.log(\"node to be added\", parent)              \r\n                    parent.childNodes.push(this.CloneObject(node))\r\n                }\r\n            }\r\n            else{\r\n                console.log(\"node not here so adding\")\r\n                arrayTo.push(this.CloneObject(node))\r\n            }\r\n        }        \r\n    }\r\n//#endregion\r\n\r\n//#region button click events\r\n    moveToSelected = e => {\r\n        if(this.state.selectedLeft){\r\n\r\n        var alreadyMoved = this.state.selectedList\r\n            var currentSelected = this.state.selected;\r\n            var pathToNode = this.findPath(this.state.list, currentSelected)\r\n            console.log(\"path\", pathToNode);\r\n            pathToNode.pop()\r\n\r\n            pathToNode.map( n => {\r\n                let currentNodeL = this.findNode(this.state.list, n)\r\n                let currentNodeR = this.findNode(alreadyMoved, n)\r\n                if(!currentNodeR){\r\n                    let tempNode = this.CloneObject(currentNodeL)\r\n                    tempNode.childNodes.length = 0\r\n                    this.addNode(alreadyMoved, tempNode)\r\n                }\r\n            })\r\n\r\n            let currentNodeR = this.findNode(alreadyMoved, currentSelected.id)\r\n            if(currentNodeR){\r\n                //if selected node is in rhs, just add all the remoainging childrren\r\n                let currentNodeL = this.findNode(this.state.list, currentSelected.id)\r\n                currentNodeL.childNodes.map( n => {\r\n                    this.addNode(alreadyMoved, n)\r\n                })\r\n            }\r\n            else{\r\n                this.addNode(alreadyMoved, currentSelected)\r\n            }\r\n            let leftArray = this.removeNode(this.state.list, currentSelected)\r\n            this.setState({\r\n                list: leftArray,\r\n                selectedList: alreadyMoved\r\n            })\r\n            this.props.onnodemoved ? this.props.onnodemoved([...alreadyMoved]) : null\r\n        }\r\n    }\r\n \r\n    moveToNotSelected(){\r\n        if(this.state.selectedRight){\r\n            var leftArray = this.state.list\r\n            var alreadyMoved = this.state.selectedList\r\n            var currentSelected = this.state.selected;\r\n            var pathToNode = this.findPath(alreadyMoved, currentSelected)\r\n            pathToNode.pop()\r\n\r\n            pathToNode.map( n => {\r\n                let currentNodeL = this.findNode(this.state.list, n)\r\n                let currentNodeR = this.findNode(alreadyMoved, n)\r\n                if(!currentNodeL){\r\n                    let tempNode = this.CloneObject(currentNodeR)\r\n                    tempNode.childNodes.length = 0\r\n                    this.addNode(leftArray, tempNode)\r\n                }\r\n            })\r\n\r\n            let currentNodeL = this.findNode(leftArray, currentSelected.id)\r\n            if(currentNodeL){\r\n                //if selected node is in rhs, just add all the remoainging childrren\r\n                let currentNodeR = this.findNode(alreadyMoved, currentSelected.id)\r\n                currentNodeR.childNodes.map( n => {\r\n                    this.addNode(leftArray, n)\r\n                })\r\n            }\r\n            else{\r\n                this.addNode(leftArray, currentSelected)\r\n            }\r\n            alreadyMoved = this.removeNode(alreadyMoved, currentSelected)\r\n            this.setState({\r\n                list: leftArray,\r\n                selectedList: alreadyMoved\r\n            })\r\n            this.props.onnodemoved ? this.props.onnodemoved([...alreadyMoved]) : null\r\n        }\r\n    }\r\n  \r\n    moveAllToRight = e => {\r\n        this.setState({\r\n          selectedList: JSON.parse(JSON.stringify(this.props.tree)),\r\n          list: []\r\n        });\r\n      };\r\n    \r\n    movedAllToLeft = e => {\r\n        this.setState({\r\n            list: JSON.parse(JSON.stringify(this.props.tree)),\r\n            selectedList: []\r\n        });\r\n    };\r\n//#endregion  \r\n\r\n//#region lifecycle methods\r\n\r\n//#endregion\r\n    render() {\r\n        \r\n        return ( \r\n            <div className=\"container\">\r\n                <Row className=\"margin\">\r\n                <Col md={5} > \r\n                    <Card style={styles.fixedcard}>\r\n                    <DynamicTree key=\"root\" id=\"root\" data={this.state.list} title=\"Orgazations\" open\r\n                            onClick={this.handleLeftNodeClick} />                 \r\n                    </Card>\r\n                  \r\n                </Col>\r\n                <Col md={1} className=\"align-self-center nopadding\">\r\n                        <div className=\"text-center\">\r\n                        <Button style={styles.buttonWidth} onClick={this.moveToSelected} > &gt; </Button>\r\n                        <Button style={styles.buttonWidth} onClick={this.moveAllToRight} > &gt;&gt; </Button>\r\n                        <Button style={styles.buttonWidth} onClick={this.moveToNotSelected}> &lt;</Button>\r\n                        <Button style={styles.buttonWidth} onClick={this.movedAllToLeft}> &lt;&lt; </Button>\r\n                        </div>\r\n                        \r\n                </Col>\r\n                <Col md={5}>\r\n                    <Card style={styles.fixedcard}>\r\n                    <DynamicTree id=\"root\" key=\"root\" data={this.state.selectedList} title=\"Selected nodes\"\r\n                        onClick={this.handleRightNodeClick} />\r\n                    </Card>                    \r\n                </Col>\r\n\r\n                </Row>\r\n            </div>\r\n            \r\n         );\r\n    }\r\n}\r\n \r\nexport default DualListBox;\r\n","import React from 'react'\nimport DualListBox from './DualListBox'\nimport './styles.module.css'\n\n\nexport const DualTreeViewListBox = ({data, onnodemoved}) => {\n  return <DualListBox tree={data} onnodemoved={onnodemoved} />\n}\n","import React, { useState } from 'react'\n\nimport { DualTreeViewListBox } from 'react-dualtreeviews-listbox'\nimport 'react-dualtreeviews-listbox/dist/index.css'\n\nvar data = [{\n  \"title\": \"Sri Lanka\",\n  \"id\": \"1\",\n  \"parentNode\": null,\n  \"childNodes\": [{\n      \"title\": \"Western Province\",\n      \"id\": \"11\",\n      \"parentNode\": \"1\",\n      \"childNodes\": [{\n        \"title\": \"Colombo District\",\n        \"id\": \"111\",\n        \"parentNode\": \"11\",\n        \"childNodes\": [], \n      },{\n        \"title\": \"Gampaha District\",\n        \"id\": \"112\",\n        \"parentNode\": \"11\",\n        \"childNodes\": [], \n      },{\n        \"title\": \"Kaluthara District\",\n        \"id\": \"113\",\n        \"parentNode\": \"11\",\n        \"childNodes\": [], \n      }],\n  },\n  {\n    \"title\": \"Central Province\",\n    \"id\": \"12\",\n    \"parentNode\": \"1\",\n    \"childNodes\": [{\n      \"parentNode\": \"12\",\n      \"childNodes\": [],\n      \"title\": \"Kandy\",\n      \"id\": \"121\"\n      }],\n  }],\n},\n{\n  \"title\": \"India\",\n  \"id\": \"2\",\n  \"childNodes\": [{\n    \"title\": \"Maharashtra\",\n    \"id\": \"21\",\n    \"parentNode\": \"2\",\n    \"childNodes\": [{\n      \"title\": \"Pune\",\n      \"id\": \"211\",\n      \"parentNode\": \"21\",\n      \"childNodes\": [],\n    }],\n  }],  \n}]\n\nconst App = () => {\n\n  const [selectedTree, setTree] = useState([])\n\n  return <div>\n    <DualTreeViewListBox data={data} onnodemoved={(list) => setTree(list)} />\n    <pre>{JSON.stringify(selectedTree, undefined, 2)}</pre>\n    </div>\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}