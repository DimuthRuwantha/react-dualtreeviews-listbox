{"version":3,"sources":["../../src/DualListBox.js","../../src/index.js","App.js","index.js"],"names":["found","styles","margin","fixedcard","buttonWidth","nopadding","constructor","e","selected","selectedLeft","selectedRight","alreadyMoved","currentSelected","pathToNode","tempArray","console","n","rNode","element","lNode","cloned","parent","node","originalNode","clone","removed","selectedParent","root","list","unmovedList","selectedList","JSON","id","array","removedArray","this","findNode","index","path","findParent","className","md","style","key","data","state","title","open","treeNodeClick","isActive","onClick","moveToSelected","moveAllToRight","moveToNotSelected","movedAllToLeft","React","overview","DualTreeViewListBox","tree","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.99a740a6.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Row, Col, Button, Card } from 'reactstrap';\r\nimport  DynamicTree from 'react-dynamic-animated-tree';\r\nimport DynamicDataTree from './DynamicDataTree'\r\n\r\nvar found = false // once you move a node make sure to set this to false again\r\n\r\nconst styles={\r\n    margin: {\r\n        \"margin\": \"5px\"\r\n    },\r\n    fixedcard: {\r\n        \"min-height\": \"400px\",\r\n        \"max-height\": \"400px\",\r\n        \"padding\": \"10px\",\r\n        \"overflow-y\": \"auto\"\r\n    },\r\n    buttonWidth: {\r\n        \"width\": \"50px\",\r\n        \"margin\": \"5px\"\r\n    },\r\n    nopadding: {\r\n        \"padding-left\": \"0px\",\r\n    }\r\n}\r\nclass DualListBox extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            list: this.CloneObject(overview), \r\n            selected: null,\r\n            selectedLeft: null,\r\n            selectedRight: null,\r\n            selectedList: []\r\n         }\r\n        this.handleLeftNodeClick = this.handleLeftNodeClick.bind(this)\r\n        this.handleRightNodeClick = this.handleRightNodeClick.bind(this)\r\n\r\n        this.moveToSelected = this.moveToSelected.bind(this)\r\n        this.moveToNotSelected = this.moveToNotSelected.bind(this)\r\n\r\n        this.moveAllToRight = this.moveAllToRight.bind(this);\r\n        this.movedAllToLeft = this.movedAllToLeft.bind(this);\r\n    }\r\n//#region node click events\r\n    handleLeftNodeClick = e => {\r\n        if(e.id !== \"root\")\r\n        {\r\n            this.setState({ \r\n                selected: e, \r\n                selectedLeft: e,\r\n                selectedRight: null\r\n            })\r\n        }\r\n    }\r\n\r\n    handleRightNodeClick = e => {\r\n        if(e.id !== \"root\")\r\n        {\r\n            this.setState({ \r\n                selected: e,\r\n                selectedRight: e,\r\n                selectedLeft: null\r\n            })\r\n        }\r\n    }\r\n//#endregion\r\n\r\n//#region node operations\r\n    CloneObject(object){\r\n        var cloned = JSON.parse(JSON.stringify(object))\r\n        return cloned\r\n    }\r\n\r\n    removeNode(array, node){\r\n        var id = node.id\r\n        \r\n        array.forEach(element => {\r\n          if(element.id === id){\r\n              found = true\r\n          }\r\n          if(!found){\r\n            var removedArray = this.removeNode(element.childNodes, node)\r\n            element.childNodes = removedArray\r\n        }\r\n        });\r\n        array = array.filter( n => n.id !== id)\r\n\r\n        return array\r\n    }\r\n\r\n    findParent(array, node){\r\n        var id = node.parentNode\r\n        var foundNode = this.findNode(array, id)\r\n        return foundNode;\r\n    }\r\n\r\n    findNode(array, id){\r\n        let node;\r\n        for (let index = 0; index < array.length; index++) {\r\n            const element = array[index];\r\n            if(element.id === id){\r\n                node = element\r\n                break\r\n            }\r\n            else{\r\n                node = this.findNode(element.childNodes, id)\r\n                if(node){\r\n                    break\r\n                }\r\n            }\r\n        }\r\n        return node;\r\n    }\r\n\r\n    findPath(array, node){\r\n        var path = []\r\n        path.push(node.id)\r\n        //console.log(path)\r\n        this.pushParent(array, node, path)\r\n        path.reverse()\r\n        console.log(\"finally\", path)\r\n        return path\r\n    }\r\n\r\n    pushParent(array, node, path){\r\n        \r\n        var parent = this.findParent(array, node)\r\n        if(parent){\r\n            path.push(parent.id)\r\n            //console.log(path)\r\n            this.pushParent(array, parent, path)\r\n        }\r\n    }\r\n//#endregion\r\n\r\n//#region button click events\r\n    moveToSelected = e => {\r\n        if(this.state.selectedLeft){\r\n            var alreadyMoved = this.state.selectedList\r\n            var currentSelected = this.state.selected;\r\n            var pathToNode = this.findPath(this.state.list, currentSelected)\r\n            pathToNode.pop()\r\n\r\n            //Add missing parent nodes to right\r\n            var tempArray = alreadyMoved\r\n            console.log(\"init tempArray\", tempArray)\r\n            pathToNode.map( n => {\r\n                var rNode = tempArray.find(function(element){\r\n                    return element.id === n\r\n                })\r\n\r\n                console.log(\"rNode\", rNode)\r\n                if(!rNode){\r\n                    //tempArray doesnt have the node so get it from left and add it\r\n                    let lNode = this.findNode(this.state.list, n)\r\n                    console.log(\"node from right\", lNode)\r\n                    let cloned = this.CloneObject(lNode)\r\n                    cloned.childNodes = []\r\n                    console.log(\"clonde\", cloned.childNodes)\r\n                    tempArray.push(cloned)\r\n                    console.log(\"new tempArray\", tempArray)\r\n                   \r\n                }\r\n                else{\r\n                    //already have so no need to add\r\n                }\r\n                 //goto the pushed node and find next node in childNodes\r\n                 tempArray = tempArray.find(function(element){\r\n                     return element.id === n\r\n                 }).childNodes\r\n                 console.log(\"updated tempArray\", tempArray)\r\n                 return alreadyMoved\r\n            })\r\n\r\n            var parent = this.findParent(alreadyMoved, currentSelected)\r\n            if(parent){\r\n                console.log(\"parent\", parent)\r\n                parent.childNodes.push(currentSelected)\r\n                console.log(\"child\", parent.childNodes)\r\n            }\r\n            else{\r\n                let node = this.findNode(alreadyMoved, currentSelected.id)\r\n                if(node){\r\n                    let originalNode = this.findNode(overview, currentSelected.id)\r\n                    let clone = this.CloneObject(originalNode)\r\n                    node.childNodes = clone.childNodes\r\n                }\r\n                else{\r\n                    alreadyMoved.push(currentSelected)\r\n                }              \r\n            }\r\n\r\n            var removed = this.removeNode(this.state.list, currentSelected)\r\n            found = false\r\n\r\n            // if parent is empty clean up\r\n            var selectedParent = this.findParent(this.state.list,currentSelected)\r\n\r\n            if( selectedParent && selectedParent.childNodes.length === 0){\r\n                removed = this.removeNode(this.state.list, selectedParent)\r\n                found = false\r\n                let root = this.findParent(this.state.list, selectedParent)\r\n                if(root && root.childNodes.length === 0){\r\n                    removed = this.removeNode(this.state.list, root)\r\n                    found = false\r\n                }\r\n            }\r\n            \r\n            this.setState({\r\n                selected: null,\r\n                list: removed\r\n            })\r\n        }\r\n    }\r\n\r\n    moveToNotSelected = e => {\r\n        if(this.state.selectedRight){\r\n            var unmovedList = this.state.list\r\n            var currentSelected = this.state.selected;\r\n\r\n            var pathToNode = this.findPath(this.state.selectedList, currentSelected)\r\n            pathToNode.pop()\r\n\r\n            //Add missing parent nodes to right\r\n            var tempArray = unmovedList\r\n            console.log(\"init tempArray\", tempArray)\r\n            pathToNode.map( n => {\r\n                var rNode = tempArray.find(function(element){\r\n                    return element.id === n\r\n                })\r\n\r\n                console.log(\"rNode\", rNode)\r\n                if(!rNode){\r\n                    //tempArray doesnt have the node so get it from left and add it\r\n                    let lNode = this.findNode(this.state.selectedList, n)\r\n                    console.log(\"node from right\", lNode)\r\n                    let cloned = this.CloneObject(lNode)\r\n                    cloned.childNodes = []\r\n                    console.log(\"clonde\", cloned.childNodes)\r\n                    tempArray.push(cloned)\r\n                    console.log(\"new tempArray\", tempArray)\r\n                   \r\n                }\r\n                else{\r\n                    //already have so no need to add\r\n                }\r\n                 //goto the pushed node and find next node in childNodes\r\n                 tempArray = tempArray.find(function(element){\r\n                     return element.id === n\r\n                 }).childNodes\r\n                 console.log(\"updated tempArray\", tempArray)\r\n                 return unmovedList\r\n            })\r\n\r\n            var parent = this.findParent(unmovedList, currentSelected)\r\n            if(parent){\r\n                console.log(\"parent\", parent)\r\n                parent.childNodes.push(currentSelected)\r\n                console.log(\"child\", parent.childNodes)\r\n            }\r\n            else{\r\n                let node = this.findNode(unmovedList, currentSelected.id)\r\n                if(node){\r\n                    let originalNode = this.findNode(overview, currentSelected.id)\r\n                    let clone = this.CloneObject(originalNode)\r\n                    node.childNodes = clone.childNodes\r\n                }\r\n                else{\r\n                    unmovedList.push(currentSelected)\r\n                }\r\n            }\r\n\r\n            var removed = this.removeNode(this.state.selectedList, currentSelected)\r\n            found = false\r\n            // if parent is empty clean up\r\n            var selectedParent = this.findParent(removed,currentSelected)\r\n            if( selectedParent && selectedParent.childNodes.length === 0){\r\n                removed = this.removeNode(removed, selectedParent)\r\n                found = false\r\n                let root = this.findParent(this.state.selectedList, selectedParent)\r\n                if(root && root.childNodes.length === 0){\r\n                    removed = this.removeNode(this.state.selectedList, root)\r\n                    found = false\r\n                }\r\n            }\r\n\r\n            this.setState({\r\n                selected: null,\r\n                selectedList: removed\r\n            })\r\n        }       \r\n    }\r\n\r\n    moveAllToRight = e => {\r\n        console.log(overview);\r\n        this.setState({\r\n          selectedList: JSON.parse(JSON.stringify(overview)),\r\n          list: []\r\n        });\r\n      };\r\n    \r\n    movedAllToLeft = e => {\r\n        console.log(this.state.selectedList)\r\n    this.setState({\r\n        list: JSON.parse(JSON.stringify(overview)),\r\n        selectedList: []\r\n    });\r\n    };\r\n//#endregion  \r\n\r\n    render() {\r\n        return ( \r\n            <div className=\"container\">\r\n                <Row className=\"margin\">\r\n                <Col md={5} > \r\n                    <Card style={styles.fixedcard}>\r\n                    <DynamicTree key=\"root\" id=\"root\" data={this.state.list} title=\"Organizations\" open\r\n                            treeNodeClick={this.handleLeftNodeClick} isActive={this.state.selectedLeft} />                 \r\n                    </Card>\r\n                  \r\n                </Col>\r\n                <Col md={1} className=\"align-self-center nopadding\">\r\n                        <div className=\"text-center\">\r\n                        <Button style={styles.buttonWidth} onClick={this.moveToSelected} > &gt; </Button>\r\n                        <Button style={styles.buttonWidth} onClick={this.moveAllToRight} > &gt;&gt; </Button>\r\n                        <Button style={styles.buttonWidth} onClick={this.moveToNotSelected}> &lt;</Button>\r\n                        <Button style={styles.buttonWidth} onClick={this.movedAllToLeft}> &lt;&lt; </Button>\r\n                        </div>\r\n                        \r\n                </Col>\r\n                <Col md={5}>\r\n                    <Card style={styles.fixedcard}>\r\n                    <DynamicTree id=\"0\" key=\"0\" data={overview} title=\"Countries\" />\r\n                    </Card>                    \r\n                </Col>\r\n\r\n                </Row>\r\n            </div>\r\n            \r\n         );\r\n    }\r\n}\r\n \r\nexport default DualListBox;\r\n\r\n\r\nvar overview = [{\r\n    \"parentNode\": null,\r\n    \"title\": \"Department One\",\r\n    \"id\": \"25\",\r\n    \"childNodes\": [{\r\n        \"parentNode\": \"25\",\r\n        \"title\": \"Section 1\",\r\n        \"id\": \"251\",\r\n        \"childNodes\": [{\r\n            \"parentNode\": \"251\",\r\n            \"title\": \"Ward 1\",\r\n            \"id\": \"2511\",\r\n            \"childNodes\": [],\r\n        }]       \r\n    },\r\n    {\r\n        \"parentNode\": \"25\",\r\n        \"title\": \"Section 2\",\r\n        \"id\": \"252\",\r\n        \"childNodes\": [{\r\n            \"parentNode\": \"252\",\r\n            \"childNodes\": [],\r\n            \"title\": \"Ward 1\",\r\n            \"id\": \"2521\"\r\n        }],\r\n    },{\r\n        \"parentNode\": \"25\",\r\n        \"title\": \"Section 3\",\r\n        \"id\": \"253\",\r\n        \"childNodes\": [{\r\n            \"parentNode\": \"253\",\r\n            \"childNodes\": [],\r\n            \"title\": \"Ward 1\",\r\n            \"id\": \"2531\"\r\n        }],\r\n    }],\r\n}, {\r\n    \"parentNode\": null,\r\n    \"title\": \"Department Two\",\r\n    \"id\": \"26\",\r\n    \"childNodes\": [{\r\n        \"parentNode\": \"26\",\r\n        \"title\": \"Section 3\",\r\n        \"id\": \"261\",\r\n        \"childNodes\": [{\r\n            \"title\": \"Ward 1\",\r\n            \"id\": \"2612\",\r\n            \"parentNode\": \"261\",\r\n            \"childNodes\": [],          \r\n        }],\r\n    },\r\n    {\r\n        \"parentNode\": \"26\",\r\n        \"title\": \"OPD 2\",\r\n        \"id\": \"262\",\r\n        \"childNodes\": [],\r\n    }],\r\n},\r\n{\r\n    \"parentNode\": null,\r\n    \"title\": \"OPD 1\",\r\n    \"id\": \"27\",\r\n    \"childNodes\": [],\r\n}]","import React from 'react'\nimport DualListBox from './DualListBox'\nimport styles from './styles.module.css'\n\n\nexport const DualTreeViewListBox = data => {\n  console.log(data)\n  return <DualListBox tree={data} />\n}\n","import React from 'react'\n\nimport { DualTreeViewListBox } from 'react-dualtreeviews-listbox'\nimport 'react-dualtreeviews-listbox/dist/index.css'\n\nvar data = [{\n  \"title\": \"Sri Lanka\",\n  \"id\": \"1\",\n  \"childNodes\": [{\n      \"title\": \"Western Province\",\n      \"id\": \"11\",\n      \"childNodes\": [{\n        \"title\": \"Colombo District\",\n        \"id\": \"111\",\n        \"childNodes\": [], \n      }],\n  },\n  {\n    \"title\": \"Central Province\",\n    \"id\": \"12\",\n    \"childNodes\": [{\n      \"parentNode\": null,\n      \"childNodes\": [],\n      \"title\": \"Kandy\",\n      \"id\": \"121\"\n      }],\n  }],\n},\n{\n  \"title\": \"India\",\n  \"id\": \"2\",\n  \"childNodes\": [{\n    \"title\": \"Maharashtra\",\n    \"id\": \"21\",\n    \"childNodes\": [{\n      \"title\": \"Pune\",\n      \"id\": \"211\",\n      \"childNodes\": [],\n    }],\n  }],  \n}]\n\nconst App = () => {\n  return <DualTreeViewListBox data={data} />\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}